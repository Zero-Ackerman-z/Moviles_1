//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/TouchController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchController"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""75986eea-c732-4fdc-b63f-11f79f4b8087"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Value"",
                    ""id"": ""8e4b0b9f-1bad-459a-bdac-06cb44fd12ff"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Press"",
                    ""type"": ""Value"",
                    ""id"": ""a01962cb-4db6-4c66-b6f0-c3a47f2d753a"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Swipe"",
                    ""type"": ""Value"",
                    ""id"": ""82c718b4-9f4d-4bd9-a441-7dd48ddc4613"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DoubleTap"",
                    ""type"": ""Value"",
                    ""id"": ""bddb45ac-74d4-441a-9a60-7eb1848b7a27"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PositionTouch"",
                    ""type"": ""Value"",
                    ""id"": ""9722b2cf-9742-4b80-9fe6-302588934204"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8b1cc7a4-a4e6-47f4-982e-717a6a30a23a"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18d1f067-d835-48ce-8d3b-2caaacd7b890"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4a000f6-5569-41e0-862c-d985360894f4"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60ec052e-5ecb-4291-aa86-babf70e85aae"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoubleTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72878f07-e71b-41ad-867a-c5fd5ef4c6df"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PositionTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_Tap = m_Game.FindAction("Tap", throwIfNotFound: true);
        m_Game_Press = m_Game.FindAction("Press", throwIfNotFound: true);
        m_Game_Swipe = m_Game.FindAction("Swipe", throwIfNotFound: true);
        m_Game_DoubleTap = m_Game.FindAction("DoubleTap", throwIfNotFound: true);
        m_Game_PositionTouch = m_Game.FindAction("PositionTouch", throwIfNotFound: true);
    }

    ~@TouchController()
    {
        UnityEngine.Debug.Assert(!m_Game.enabled, "This will cause a leak and performance issues, TouchController.Game.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_Tap;
    private readonly InputAction m_Game_Press;
    private readonly InputAction m_Game_Swipe;
    private readonly InputAction m_Game_DoubleTap;
    private readonly InputAction m_Game_PositionTouch;
    public struct GameActions
    {
        private @TouchController m_Wrapper;
        public GameActions(@TouchController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_Game_Tap;
        public InputAction @Press => m_Wrapper.m_Game_Press;
        public InputAction @Swipe => m_Wrapper.m_Game_Swipe;
        public InputAction @DoubleTap => m_Wrapper.m_Game_DoubleTap;
        public InputAction @PositionTouch => m_Wrapper.m_Game_PositionTouch;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @Tap.started += instance.OnTap;
            @Tap.performed += instance.OnTap;
            @Tap.canceled += instance.OnTap;
            @Press.started += instance.OnPress;
            @Press.performed += instance.OnPress;
            @Press.canceled += instance.OnPress;
            @Swipe.started += instance.OnSwipe;
            @Swipe.performed += instance.OnSwipe;
            @Swipe.canceled += instance.OnSwipe;
            @DoubleTap.started += instance.OnDoubleTap;
            @DoubleTap.performed += instance.OnDoubleTap;
            @DoubleTap.canceled += instance.OnDoubleTap;
            @PositionTouch.started += instance.OnPositionTouch;
            @PositionTouch.performed += instance.OnPositionTouch;
            @PositionTouch.canceled += instance.OnPositionTouch;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @Tap.started -= instance.OnTap;
            @Tap.performed -= instance.OnTap;
            @Tap.canceled -= instance.OnTap;
            @Press.started -= instance.OnPress;
            @Press.performed -= instance.OnPress;
            @Press.canceled -= instance.OnPress;
            @Swipe.started -= instance.OnSwipe;
            @Swipe.performed -= instance.OnSwipe;
            @Swipe.canceled -= instance.OnSwipe;
            @DoubleTap.started -= instance.OnDoubleTap;
            @DoubleTap.performed -= instance.OnDoubleTap;
            @DoubleTap.canceled -= instance.OnDoubleTap;
            @PositionTouch.started -= instance.OnPositionTouch;
            @PositionTouch.performed -= instance.OnPositionTouch;
            @PositionTouch.canceled -= instance.OnPositionTouch;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);
    public interface IGameActions
    {
        void OnTap(InputAction.CallbackContext context);
        void OnPress(InputAction.CallbackContext context);
        void OnSwipe(InputAction.CallbackContext context);
        void OnDoubleTap(InputAction.CallbackContext context);
        void OnPositionTouch(InputAction.CallbackContext context);
    }
}
